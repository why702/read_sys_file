import argparse
import os

from utils import get_index

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("dir", help="directory of PNGs", default=".")
    parser.add_argument("filepath", help="output fpdbindex path", default="")
    parser.add_argument("-ig", "--ignore", help="ignore key word, no need to match case", default="")
    parser.add_argument("-dpi", "--dpi", help="dpi setting", default="655")
    args = parser.parse_args()

    path = args.dir
    filepath = args.filepath
    ign = args.ignore.lower()
    dpi = args.dpi

    filename = os.path.splitext(os.path.basename(filepath))[0]

    path_root = os.path.dirname(filepath)
    folder_fpdbindex = path.replace(path_root, "")
    # remove \\ in front of folder path
    if folder_fpdbindex[0] == "\\":
        folder_fpdbindex = folder_fpdbindex[1:]

    ignore = ign.split(',')
    for i in range(len(ignore)):
        if ignore[i] == "":
            ignore = []
            break
    _, output_update_list, ignore_count, err_count, user_et = get_index(path, ignore)

    fp = open(filepath, "w")

    fp.write(
        "# This file contains information about a fingerprint database.\n")
    fp.write(
        "# It is intended to help when iterating over all images of a database.\n"
    )
    fp.write("#\n")
    fp.write("#\n")
    fp.write("# Database attributes:\n")
    fp.write("## fingerIdsRegistered=0,1,2,3,4,5,6,7,8,9,10,11\n")
    fp.write("## fingerTypesRegistered=0\n")
    fp.write("## idFirstVerificationSample=1000\n")
    fp.write("## idPersonBottom=1\n")
    fp.write("## idPersonTop=66\n")
    fp.write("## idSampleBottom=0\n")
    fp.write("## idSampleTop=4000\n")
    fp.write("## itemType=png\n")
    fp.write("## locked=False\n")
    fp.write("## name=" + filename + "\n")
    fp.write("## resolution={}\n".format(dpi))
    fp.write("# End of attributes\n")
    fp.write("# This file was generated by: MixedFingers\n")
    fp.write(
        "# The Python command that generated the fpdbindex can be found in the input file\n"
    )
    fp.write("#\n")
    fp.write("# Columns (tab separated):\n")
    fp.write("# Person ID (0 if unknown)\n")
    fp.write(
        "# 	Finger ID (= Finger Type if unspecified or 0 if unknown/unused)\n")
    fp.write("# 		Finger Type (according to ISO/IES 19794-2:2005 table 2)\n")
    fp.write(
        "# 			Sample ID (sometimes referred to as \"Attempt\" or \"Transaction\"\n"
    )
    fp.write("# 				Image file relative path\n")
    fp.write("#\n")

    output = ""
    for i in range(len(output_update_list)):
        info0, info1, info2, info3, info4 = output_update_list[i].split('\t')
        # if output_update_list[i].find("_TRY_") >= 0:
        #     try_num = int(
        #         output_update_list[i][output_update_list[i].find("_TRY_") +
        #                               5:output_update_list[i].find("_TRY_") +
        #                                 6])
        #     if try_num >= 0:
        #         output = "{0}\t{1}\t{2}\t{3}\t{4} : verify_count={5}".format(
        #             info0, info1, info2, info3, folder_fpdbindex + '\\' + info4, try_num)
        # else:
        output = "{0}\t{1}\t{2}\t{3}\t{4}".format(
            info0, info1, info2, info3, folder_fpdbindex + '\\' + info4)
        fp.write(output + "\n")

    fp.write("#len = {}\n".format(len(output_update_list)))
    fp.write("#ignore_count = {}\n".format(ignore_count))
    fp.write("#err_count = {}\n".format(err_count))
    fp.write("#user_et = {}\n".format(user_et))

    fp.close()
