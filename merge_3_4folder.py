import argparse
import os

import generate_4folder
from utils import parse_file_name


def merge_fpdbindex(path0, path1, path2, filepath):
    path_root = os.path.dirname(filepath)

    if path0.find(path_root) < 0:
        print("path0.find(path_root) < 0")
        return
    if path1.find(path_root) < 0:
        print("path1.find(path_root) < 0")
        return
    if path2.find(path_root) < 0:
        print("path2.find(path_root) < 0")
        return

    filename = os.path.splitext(os.path.basename(filepath))[0]

    ignore = ['TRY_0_TRY', 'TRY_1_TRY', 'TRY_2_TRY']

    # simulate
    sdk = 0
    try0_ignore_thresh = 90
    try1_ignore_thresh = 0
    try0_learning_thresh = 80
    try1_learning_thresh = 0  # change

    # if args.mode == 0:  # sdk
    #     sdk = 1
    #     try1_learning_thresh = 90
    # elif args.mode == 1:  # full learn
    #     sdk = 0
    #     try1_learning_thresh = 0  # change

    list0, _, _, _, user_et0 = generate_4folder.get_index(path0, ignore=ignore)
    list1, _, _, _, user_et1 = generate_4folder.get_index(path1, ignore=ignore)
    list2, _, _, _, user_et2 = generate_4folder.get_index(path2, ignore=ignore)

    if len(list0) != len(list1):
        print("len(list0) != len(list1)")
        return
    if len(list0) != len(list2):
        print("len(list0) != len(list2)")
        return

    # print("#user_et0 = {}".format(user_et0))
    # print("#user_et1 = {}".format(user_et1))
    # print("#user_et2 = {}".format(user_et2))

    folder0 = path0.replace(path_root, "")
    folder1 = path1.replace(path_root, "")
    folder2 = path2.replace(path_root, "")

    # remove \\ in front of folder path
    if folder0[0] == "\\":
        folder0 = folder0[1:]
    if folder1[0] == "\\":
        folder1 = folder1[1:]
    if folder2[0] == "\\":
        folder2 = folder2[1:]

    fp = open(filepath, "w")

    fp.write(
        "# This file contains information about a fingerprint database.\n")
    fp.write(
        "# It is intended to help when iterating over all images of a database.\n"
    )
    fp.write("#\n")
    fp.write("#\n")
    fp.write("# Database attributes:\n")
    fp.write("## fingerIdsRegistered=0,1,2,3,4,5,6,7,8,9,10,11\n")
    fp.write("## fingerTypesRegistered=0\n")
    fp.write("## idFirstVerificationSample=1000\n")
    fp.write("## idPersonBottom=1\n")
    fp.write("## idPersonTop=66\n")
    fp.write("## idSampleBottom=0\n")
    fp.write("## idSampleTop=4000\n")
    fp.write("## itemType=png\n")
    fp.write("## locked=False\n")
    fp.write("## name=" + filename + "\n")
    fp.write("## resolution=705\n")
    fp.write("# End of attributes\n")
    fp.write("# This file was generated by: MixedFingers\n")
    fp.write(
        "# The Python command that generated the fpdbindex can be found in the input file\n"
    )
    fp.write("#\n")
    fp.write("# Columns (tab separated):\n")
    fp.write("# Person ID (0 if unknown)\n")
    fp.write(
        "# 	Finger ID (= Finger Type if unspecified or 0 if unknown/unused)\n")
    fp.write("# 		Finger Type (according to ISO/IES 19794-2:2005 table 2)\n")
    fp.write(
        "# 			Sample ID (sometimes referred to as \"Attempt\" or \"Transaction\"\n"
    )
    fp.write("# 				Image file relative path\n")
    fp.write("#\n")

    count = 0
    verify_count = 0
    for i in range(len(list0)):
        log = parse_file_name(list0[i])

        info0, info1, info2, info3, info4 = list0[i].split('\t')
        _, _, _, _, info5 = list1[i].split('\t')
        _, _, _, _, info6 = list2[i].split('\t')

        if info4.find('20201002_142457_673') >= 0:
            print()
            pass

        # init count
        if int(info3) % 10000 == 0:
            count = int(info3)
        elif int(info3) == 0:
            count = 0

        if int(info3) < 1000:  # enroll
            output0 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                info0, info1, info2, count, folder0 + '\\' + info4 + "\n")
            count += 1
            fp.write(output0)
            # output1 = "{0}\t{1}\t{2}\t{3}\t{4}".format( info0, info1, info2, count, folder1 + '\\' + info9 + "\n")
            # count += 1
            # fp.write(output1)
        else:  # verify
            output0 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                info0, info1, info2, count, folder0 + '\\' + info4)
            count += 1
            output1 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                info0, info1, info2, count, folder1 + '\\' + info5)
            count += 1
            output2 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                info0, info1, info2, count, folder2 + '\\' + info6)
            count += 1

            if info4.find("_TRY_") >= 0:
                try_num = int(info4[info4.find("_TRY_") +
                                    5:info4.find("_TRY_") + 6])
                if try_num == 0:
                    verify_count = 0
                else:
                    verify_count += 3

            if log.dict['egp'] == 'None':
                fp.write(output0 +
                         " : verify_count={}\n".format(verify_count))
                fp.write(output1 +
                         " : verify_count={}\n".format(verify_count + 1))
                fp.write(output2 +
                         " : verify_count={}\n".format(verify_count + 2))
            elif log.dict['irl'] == 'None' or log.dict[
                'rls'] == 'None' or log.dict['sl'] == 'None':
                if int(log.dict['egp']) >= try0_ignore_thresh:
                    if int(log.dict['egp']) >= try0_learning_thresh:
                        fp.write(
                            output0 +
                            " : verify_count={}\n".format(verify_count))
                        fp.write(
                            output1 +
                            " : verify_count={}\n".format(verify_count + 1))
                    else:
                        fp.write(output0 +
                                 " : verify_count={} skip_dyn_update\n".
                                 format(verify_count))
                        fp.write(output1 +
                                 " : verify_count={} skip_dyn_update\n".
                                 format(verify_count + 1))
                    if int(log.dict['egp']) >= try1_ignore_thresh:
                        if int(log.dict['egp']) >= try1_learning_thresh:
                            fp.write(output2 +
                                     " : verify_count={}\n".format(
                                         verify_count + 2))
                        else:
                            fp.write(
                                output2 +
                                " : verify_count={} skip_dyn_update\n".
                                format(verify_count + 2))
                elif int(log.dict['egp']) >= try1_ignore_thresh:
                    if int(log.dict['egp']) >= try1_learning_thresh:
                        fp.write(
                            output2 +
                            " : verify_count={}\n".format(verify_count))
                    else:
                        fp.write(output2 +
                                 " : verify_count={} skip_dyn_update\n".
                                 format(verify_count))
                    # verify_count -= 1
            else:  # has egp, rl, irl...
                # if int(log.dict['irl']) > 0 and (int(log.dict['rls']) > 50
                #                                  or
                #                                  int(log.dict['sl']) > 90):
                #     if sdk == 1:
                #         fp.write(output0 +
                #                  " : verify_count={} skip_dyn_update\n".
                #                  format(verify_count))
                #         fp.write(output1 +
                #                  " : verify_count={} skip_dyn_update\n".
                #                  format(verify_count + 1))
                #         fp.write(output2 +
                #                  " : verify_count={} skip_dyn_update\n".
                #                  format(verify_count + 2))
                #     else:
                #         if int(log.dict['egp']) >= try1_learning_thresh:
                #             fp.write(output1 +
                #                      " : verify_count={}\n".format(
                #                          verify_count))
                #         else:
                #             fp.write(
                #                 output1 +
                #                 " : verify_count={} skip_dyn_update\n".
                #                 format(verify_count))
                #         verify_count -= 1
                # elif int(log.dict['egp']) >= try0_ignore_thresh:
                #     if int(log.dict['egp']) >= try0_learning_thresh:
                #         fp.write(
                #             output0 +
                #             " : verify_count={}\n".format(verify_count))
                #     else:
                #         fp.write(output0 +
                #                  " : verify_count={} skip_dyn_update\n".
                #                  format(verify_count))
                #     if int(log.dict['egp']) >= try1_ignore_thresh:
                #         if int(log.dict['egp']) >= try1_learning_thresh:
                #             fp.write(output1 +
                #                      " : verify_count={}\n".format(
                #                          verify_count + 1))
                #         else:
                #             fp.write(
                #                 output1 +
                #                 " : verify_count={} skip_dyn_update\n".
                #                 format(verify_count + 1))
                # elif int(log.dict['egp']) >= try1_ignore_thresh:
                #     if int(log.dict['egp']) >= try1_learning_thresh:
                #         fp.write(
                #             output1 +
                #             " : verify_count={}\n".format(verify_count))
                #     else:
                #         fp.write(output1 +
                #                  " : verify_count={} skip_dyn_update\n".
                #                  format(verify_count))
                #     verify_count -= 1
                pass

    fp.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("dir0", help="merged directory 0")
    parser.add_argument("dir1", help="merged directory 1")
    parser.add_argument("dir2", help="merged directory 1")
    parser.add_argument("filepath",
                        help="output merged fpdbindex path",
                        default="")
    parser.add_argument("-m", "--mode", type=int, help="learn mode", default=0)
    args = parser.parse_args()

    path0 = args.dir0
    path1 = args.dir1
    path2 = args.dir2
    filepath = args.filepath

    merge_fpdbindex(path0, path1, path2, filepath)
