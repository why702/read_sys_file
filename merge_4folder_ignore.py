import os
import numpy as np
import matplotlib.pylab as plt
from itertools import zip_longest
import cv2
import re
import csv
import argparse
import generate_4folder
import read_BMP

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("dir0", help="merged directory 0")
    parser.add_argument("dir1", help="merged directory 1")
    parser.add_argument("filepath",
                        help="output merged fpdbindex path",
                        default="")
    parser.add_argument("-m", "--mode", type=int, help="learn mode", default=0)
    parser.add_argument("-ig", "--ignore", help="ignore key word", default="")
    args = parser.parse_args()

    path0 = args.dir0
    path1 = args.dir1
    filepath = args.filepath
    path_root = os.path.dirname(filepath)
    filename = os.path.splitext(os.path.basename(filepath))[0]

    ign = args.ignore
    ignore = ign.split(',')
    # # sdk
    # sdk = 1
    # try0_thresh = 0
    # try1_thresh = 0
    # try0_learning_thresh = 80
    # try1_learning_thresh = try0_learning_thresh  # 80

    # simulate
    sdk = 0
    try0_thresh = 80
    try1_thresh = 0
    try0_learning_thresh = 80
    try1_learning_thresh = 0  # change

    if args.mode == 1:  # full
        sdk = 0
        try0_thresh = 80
        try1_thresh = 0
        try0_learning_thresh = 80
        try1_learning_thresh = 0  # change
    elif args.mode == 0:  # sdk
        sdk = 1
        try0_thresh = 0
        try1_thresh = 0
        try0_learning_thresh = 80
        try1_learning_thresh = try0_learning_thresh  # 80
    # elif args.mode == "01":  # sdk on
    #     sdk = 1
    #     try0_thresh = 0
    #     try1_thresh = 0
    #     try0_learning_thresh = 80
    #     try1_learning_thresh = try0_learning_thresh  # 80
    #     ignore = ["normal_edge", "walk", "under", "08-24-10-59-40-372", "08-24-10-59-41-726"]
    # elif args.mode == "02":  # sdk under
    #     sdk = 1
    #     try0_thresh = 0
    #     try1_thresh = 0
    #     try0_learning_thresh = 80
    #     try1_learning_thresh = try0_learning_thresh  # 80
    #     ignore = ["normal_edge", "walk", "on", "08-24-10-59-40-372", "08-24-10-59-41-726"]
    # elif args.mode == "03":  # sdk walk
    #     sdk = 1
    #     try0_thresh = 0
    #     try1_thresh = 0
    #     try0_learning_thresh = 80
    #     try1_learning_thresh = try0_learning_thresh  # 80
    #     ignore = ["normal_edge", "under", "on", "08-24-10-59-40-372", "08-24-10-59-41-726"]
    # elif args.mode == "11":  # full on
    #     sdk = 0
    #     try0_thresh = 80
    #     try1_thresh = 0
    #     try0_learning_thresh = 80
    #     try1_learning_thresh = 0  # change
    #     ignore = ["normal_edge", "walk", "under", "08-24-10-59-40-372", "08-24-10-59-41-726"]
    # elif args.mode == "12":  # full under
    #     sdk = 0
    #     try0_thresh = 80
    #     try1_thresh = 0
    #     try0_learning_thresh = 80
    #     try1_learning_thresh = 0  # change
    #     ignore = ["normal_edge", "walk", "on", "08-24-10-59-40-372", "08-24-10-59-41-726"]
    # elif args.mode == "13":  # full walk
    #     sdk = 0
    #     try0_thresh = 80
    #     try1_thresh = 0
    #     try0_learning_thresh = 80
    #     try1_learning_thresh = 0  # change
    #     ignore = ["normal_edge", "under", "on", "08-24-10-59-40-372", "08-24-10-59-41-726"]

    list0, _, _, _ = generate_4folder.get_index(path0, ignore=ignore)
    list1, _, _, _ = generate_4folder.get_index(path1, ignore=ignore)

    if path_root == "":
        folder1 = os.path.abspath(path1).split('\\')
        folder1 = folder1[len(folder1) - 1]
    else:
        folder0 = path0.replace(path_root, "")
        folder1 = path1.replace(path_root, "")

    # remove \\ in front of folder path
    if folder0[0] == "\\":
        folder0 = folder0[1:]
    if folder1[0] == "\\":
        folder1 = folder1[1:]

    fp = open(filepath, "w")

    fp.write(
        "# This file contains information about a fingerprint database.\n")
    fp.write(
        "# It is intended to help when iterating over all images of a database.\n"
    )
    fp.write("#\n")
    fp.write("#\n")
    fp.write("# Database attributes:\n")
    fp.write("## fingerIdsRegistered=0,1,2,3,4,5,6,7,8,9,10,11\n")
    fp.write("## fingerTypesRegistered=0\n")
    fp.write("## idFirstVerificationSample=1000\n")
    fp.write("## idPersonBottom=1\n")
    fp.write("## idPersonTop=66\n")
    fp.write("## idSampleBottom=0\n")
    fp.write("## idSampleTop=4000\n")
    fp.write("## itemType=png\n")
    fp.write("## locked=False\n")
    fp.write("## name=" + filename + "\n")
    fp.write("## resolution=705\n")
    fp.write("# End of attributes\n")
    fp.write("# This file was generated by: MixedFingers\n")
    fp.write(
        "# The Python command that generated the fpdbindex can be found in the input file\n"
    )
    fp.write("#\n")
    fp.write("# Columns (tab separated):\n")
    fp.write("# Person ID (0 if unknown)\n")
    fp.write(
        "# 	Finger ID (= Finger Type if unspecified or 0 if unknown/unused)\n")
    fp.write("# 		Finger Type (according to ISO/IES 19794-2:2005 table 2)\n")
    fp.write(
        "# 			Sample ID (sometimes referred to as \"Attempt\" or \"Transaction\"\n"
    )
    fp.write("# 				Image file relative path\n")
    fp.write("#\n")

    count = 0
    verify_count = 0
    if len(list0) == len(list1):
        for i in range(len(list0)):
            log = read_BMP.parse_file_name(list0[i])

            info0, info1, info2, info3, info4 = list0[i].split('\t')
            info5, info6, info7, info8, info9 = list1[i].split('\t')

            if info4.find('20201002_142457_673') >= 0:
                print()
                pass

            # init count
            if int(info3) % 10000 == 0:
                count = int(info3)
            elif int(info3) == 0:
                count = 0

            if int(info3) < 1000:  # enroll
                output0 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                    info0, info1, info2, count, folder0 + '\\' + info4 + "\n")
                count += 1
                fp.write(output0)
                # output1 = "{0}\t{1}\t{2}\t{3}\t{4}".format( info0, info1, info2, count, folder1 + '\\' + info9 + "\n")
                # count += 1
                # fp.write(output1)
            else:
                output0 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                    info0, info1, info2, count, folder0 + '\\' + info4)
                count += 1
                output1 = "{0}\t{1}\t{2}\t{3}\t{4}".format(
                    info0, info1, info2, count, folder1 + '\\' + info9)
                count += 1

                if info4.find("_TRY_") >= 0:
                    try_num = int(info4[info4.find("_TRY_") +
                                        5:info4.find("_TRY_") + 6])
                    if try_num == 0:
                        verify_count = 0
                    else:
                        verify_count += 2

                if log.dict['egp'] == 'None':
                    fp.write(output0 +
                             " : verify_count={}\n".format(verify_count))
                    fp.write(output1 +
                             " : verify_count={}\n".format(verify_count + 1))
                elif log.dict['irl'] == 'None' or log.dict[
                        'rls'] == 'None' or log.dict['sl'] == 'None':
                    if int(log.dict['egp']) >= try0_thresh:
                        if int(log.dict['egp']) >= try0_learning_thresh:
                            fp.write(
                                output0 +
                                " : verify_count={}\n".format(verify_count))
                        else:
                            fp.write(output0 +
                                     " : verify_count={} skip_dyn_update\n".
                                     format(verify_count))
                        if int(log.dict['egp']) >= try1_thresh:
                            if int(log.dict['egp']) >= try1_learning_thresh:
                                fp.write(output1 +
                                         " : verify_count={}\n".format(
                                             verify_count + 1))
                            else:
                                fp.write(
                                    output1 +
                                    " : verify_count={} skip_dyn_update\n".
                                    format(verify_count + 1))
                    elif int(log.dict['egp']) >= try1_thresh:
                        if int(log.dict['egp']) >= try1_learning_thresh:
                            fp.write(
                                output1 +
                                " : verify_count={}\n".format(verify_count))
                        else:
                            fp.write(output1 +
                                     " : verify_count={} skip_dyn_update\n".
                                     format(verify_count))
                        verify_count -= 1
                else:
                    if int(log.dict['irl']) > 0 and (int(log.dict['rls']) > 50
                                                     or
                                                     int(log.dict['sl']) > 90):
                        if sdk == 1:
                            fp.write(output0 +
                                     " : verify_count={} skip_dyn_update\n".
                                     format(verify_count))
                            fp.write(output1 +
                                     " : verify_count={} skip_dyn_update\n".
                                     format(verify_count + 1))
                        else:
                            if int(log.dict['egp']) >= try1_learning_thresh:
                                fp.write(output1 +
                                         " : verify_count={}\n".format(
                                             verify_count))
                            else:
                                fp.write(
                                    output1 +
                                    " : verify_count={} skip_dyn_update\n".
                                    format(verify_count))
                            verify_count -= 1
                    elif int(log.dict['egp']) >= try0_thresh:
                        if int(log.dict['egp']) >= try0_learning_thresh:
                            fp.write(
                                output0 +
                                " : verify_count={}\n".format(verify_count))
                        else:
                            fp.write(output0 +
                                     " : verify_count={} skip_dyn_update\n".
                                     format(verify_count))
                        if int(log.dict['egp']) >= try1_thresh:
                            if int(log.dict['egp']) >= try1_learning_thresh:
                                fp.write(output1 +
                                         " : verify_count={}\n".format(
                                             verify_count + 1))
                            else:
                                fp.write(
                                    output1 +
                                    " : verify_count={} skip_dyn_update\n".
                                    format(verify_count + 1))
                    elif int(log.dict['egp']) >= try1_thresh:
                        if int(log.dict['egp']) >= try1_learning_thresh:
                            fp.write(
                                output1 +
                                " : verify_count={}\n".format(verify_count))
                        else:
                            fp.write(output1 +
                                     " : verify_count={} skip_dyn_update\n".
                                     format(verify_count))
                        verify_count -= 1

    else:
        print("len(list0) {} != len(list1) {}".format(len(list0), len(list1)))
    pass

    fp.close()
